name: Train, Test, and Deploy ML Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Model version (e.g., v0.1, v0.2)'
        required: true
        default: 'v0.1'
      model_type:
        description: 'Model type'
        required: true
        default: 'linear'
        type: choice
        options:
          - linear
          - ridge
          - random_forest

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/diabetes-predictor

jobs:
  train:
    name: Train Model
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Determine model version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "model_type=${{ github.event.inputs.model_type }}" >> $GITHUB_OUTPUT
        else
          echo "version=v0.1" >> $GITHUB_OUTPUT
          echo "model_type=linear" >> $GITHUB_OUTPUT
        fi
    
    - name: Train model
      run: |
        python train.py \
          --version ${{ steps.version.outputs.version }} \
          --model-type ${{ steps.version.outputs.model_type }} \
          --output-dir models
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: |
          models/model_*.pkl
          models/metrics_*.json
        retention-days: 30
    
    - name: Display metrics
      run: |
        echo "### Model Metrics" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        cat models/metrics_${{ steps.version.outputs.version }}.json >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  test:
    name: Test API
    runs-on: ubuntu-latest
    needs: train
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: models/
    
    - name: Run unit tests
      run: |
        # Create a simple test
        cat > test_api.py << 'EOF'
        import pytest
        from fastapi.testclient import TestClient
        from app import app, load_model
        
        # Load model before tests
        load_model()
        client = TestClient(app)
        
        def test_health():
            response = client.get("/health")
            assert response.status_code == 200
            assert response.json()["status"] == "healthy"
        
        def test_predict_single():
            patient = {
                "age": 0.05,
                "sex": 0.05,
                "bmi": 0.06,
                "bp": 0.02,
                "s1": -0.04,
                "s2": -0.03,
                "s3": -0.04,
                "s4": -0.00,
                "s5": 0.02,
                "s6": -0.03
            }
            response = client.post("/predict/single", json=patient)
            assert response.status_code == 200
            data = response.json()
            assert "progression_score" in data
            assert "risk_level" in data
            assert isinstance(data["progression_score"], float)
        
        def test_predict_batch():
            patients = [
                {
                    "age": 0.05,
                    "sex": 0.05,
                    "bmi": 0.06,
                    "bp": 0.02,
                    "s1": -0.04,
                    "s2": -0.03,
                    "s3": -0.04,
                    "s4": -0.00,
                    "s5": 0.02,
                    "s6": -0.03
                },
                {
                    "age": -0.01,
                    "sex": -0.04,
                    "bmi": -0.03,
                    "bp": -0.00,
                    "s1": 0.01,
                    "s2": 0.02,
                    "s3": 0.03,
                    "s4": 0.02,
                    "s5": 0.00,
                    "s6": 0.01
                }
            ]
            response = client.post("/predict", json={"patients": patients})
            assert response.status_code == 200
            data = response.json()
            assert len(data["predictions"]) == 2
            # Check sorted by risk
            scores = [p["progression_score"] for p in data["predictions"]]
            assert scores == sorted(scores, reverse=True)
        
        def test_invalid_input():
            response = client.post("/predict/single", json={"age": "invalid"})
            assert response.status_code == 422
        EOF
        
        pytest test_api.py -v

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [train, test]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: models/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Image digest
      run: echo "Image pushed with digest ${{ steps.meta.outputs.digest }}"

  smoke-test:
    name: Smoke Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull and test image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Run container
        docker run -d --name test-api -p 8000:8000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Wait for startup
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test prediction endpoint
        curl -f -X POST http://localhost:8000/predict/single \
          -H "Content-Type: application/json" \
          -d '{
            "age": 0.05,
            "sex": 0.05,
            "bmi": 0.06,
            "bp": 0.02,
            "s1": -0.04,
            "s2": -0.03,
            "s3": -0.04,
            "s4": -0.00,
            "s5": 0.02,
            "s6": -0.03
          }' || exit 1
        
        # Cleanup
        docker stop test-api
        docker rm test-api
        
        echo "âœ… Smoke test passed!"
